# 
#   Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
# 

# if ALP				# Access Linux Platform
# gtk_gnash_LDFLAGS += "-shared -Xlinker -z -Xlinker defs $(GTK2_LIBS)"
# gtk_gnash_LDADD += $(ALP_LIBS)
# endif
#
# Build the GTK/ALP gui
#

if BUILD_ALP_GUI
pkglib_LTLIBRARIES = libgnashalp.la
libgnashalp_la_SOURCES =  $(GUI_SRCS) gtk/gui_gtk.cpp
libgnashalp_la_CPPFLAGS =  $(gtk_gnash_CPPFLAGS)\
	 $(ALP_CFLAGS) -DGUI_ALP -DGUI_CONFIG=\"ALP\" \
	 -DALP_BUILD=ALP_BUILD_DEBUG
libgnashalp_la_LDFLAGS = -module -avoid-version
libgnashalp_la_LIBADD = $(gtk_gnash_LDADD) $(ALP_LIBS)
if BUILD_OGL_RENDERER
libgnashalp_la_CPPFLAGS += $(OPENGL_CFLAGS)
libgnashalp_la_SOURCES += gtk/gtk_glue_gtkglext.cpp gtk/gtk_glue_gtkglext.h \
		gtk/gtk.cpp gtk/gtksup.h gtk/gtk_glue.h
libgnashalp_la_LIBADD += $(OPENGL_LIBS)
endif				# BUILD_OGL_RENDERER
if BUILD_AGG_RENDERER
libgnashalp_la_CPPFLAGS += $(AGG_CFLAGS)
libgnashalp_la_SOURCES += gtk/gtk_glue_agg.cpp gtk/gtk_glue_agg.h \
		gtk/gtk.cpp gtk/gtksup.h gtk/gtk_glue.h
libgnashalp_la_LIBADD += $(AGG_LIBS)
endif				# BUILD_AGG_RENDERER
if BUILD_CAIRO_RENDERER
libgnashalp_la_CPPFLAGS += $(CAIRO_CFLAGS)
libgnashalp_la_SOURCES += gtk/gtk_glue_cairo.cpp gtk/gtk_glue_cairo.h \
		gtk/gtk.cpp gtk/gtksup.h gtk/gtk_glue.h
libgnashalp_la_LIBADD += $(CAIRO_LIBS)
endif				# BUILD_CAIRO_RENDERER

# networking related info
# NETCAT_REMOTE   = netcat -q 10 `cat /tmp/alp.ip` 5038
# NETCAT_REMOTE_Q = netcat -q 8 `cat /tmp/alp.ip` 5038
# UML_IP          = 192.168.3.101
# REMOTE_IP	= 192.168.1.101
# ALP_NAMESPACE   = org.gnu.gnash
# ALP_BUNDLE_DIR  = /opt/alp/bundles/

# ALP_SECURITY  - For building signed bundles you need to set this
# 	variable to 1. The default is set to 0 
ALP_SECURITY	= 0 

# CERTIFICATE and KEY - Specify the certificate and key files for signing. 
# The default is to look for files 'certificate' and 'key' in
# the local dir then search up through the parent dirs
CERTIFICATE	= certificate
KEY		= key
PASS		= accesstest

# where does built stuff go?
BUILD_DIR	:= build/$(SBOX)
# Bundle names
# where to construct bundle hierarchy (e.g. obj/sbox/com.foo.apps.name)
SRC_BND_DIR	:= $(BUILD_DIR)/$(BND_NAME)
# Extract the bundle name directly from the Manifest file.
BND_NAMES	:= gnash
BND_NAME	:= $(word 1, $(BND_NAMES))
TARGET_NAME	:= $(word 2, $(BND_NAMES))

# install location for bundle hierarchy (for install/install-files targets)
# Check to see if there is a "bundles" directory. If there is,
# use it. Otherwise, revert to using the "packages" directory.
DEST_BND_ROOT	:= /opt/alp/bundles
DEST_BND_DIR	:= $(DEST_BND_ROOT)/$(BND_NAME)

# Bar files
# (if BAR_DIR not defined, assume bar files go in build/sbox)
# (BAR_DIR may need to be created so we can't rely solely on BAR_TARGET)
# (may be defined by build-all Makefile to collect .bar files in one place)
BAR_NAME        = $(BND_NAME).bar
BAR_TARGET      = $(BUILD_DIR)/$(BAR_NAME)
BAR_DIR         = $(BAR_DIR)/$(SBOX)

# i486 means UML target, else assume REMOTE_IP refers to ARM
# Sign the bundle
#ifeq ($(ALP_SECURITY),1)
$(SIGN_TARGET): $(CERTIFICATE) $(KEY)
	@echo [$(TARGET_NAME)] Sign $@
	$(DO_ECHO)$(SIGN) $(SRC_BND_DIR) $^ $(PASS) $(TARGET_NAME)
#endif

# alp-ip:
# 	if test ! -f /tmp/alp.ip; then \
# 	  if test "`uname -m`" = "i486" -a "`uname -m`" = "i686" ; then \
# 	    echo "$(UML_IP)" | cut -d ' ' -f1 > /tmp/alp.ip ; \
# 	  else \
# 	    echo "$(REMOTE_IP)" | cut -d ' ' -f1 > /tmp/alp.ip ; \
# 	  fi ; \
# 	fi

# alp-bundle: libgnashalp.la
# 	$(mkinstalldirs) $(ALP_NAMESPACE)/rsc
# 	echo  $(srcdir)/Manifest.xml $(ALP_NAMESPACE)/
# 	cp -f $(srcdir)/Manifest.xml $(ALP_NAMESPACE)/
# 	@if test -f libgnash.so; then \
# 	  cp -vf libgnashalp.so $(ALP_NAMESPACE)/; \
# 	else \
# 	  cp -vf .libs/libgnashalp.so $(ALP_NAMESPACE)/; \
# 	fi
# 	cp -f $(top_srcdir)/gui/images/GnashGTiny.png $(ALP_NAMESPACE)/rsc/
# 	cp -f $(top_srcdir)/gui/images/gravity.swf $(ALP_NAMESPACE)/rsc/

# bar: alp-bundle # signed $(BUNDLE_TARGETS) $(SIGN_TARGET) 
# 	$(BARTENDER) pack $(ALP_NAMESPACE) $(ALP_NAMESPACE).bar
# #	cp $(BAR_TARGET) $(BAR_DIR)

# # install-alp: alp-ip alp-bundle install-files
# # 	echo "I think I'm installing"
# # 	(echo "install $(ALP_NAMESPACE).hello.bar `ls -la $(ALP_NAMESPACE).hello.bar | cut -d ' ' -f 6,6` 0 0 0755" ; cat $(ALP_NAMESPACE).bar ) | $(NETCAT_REMOTE)
# # 	@echo; echo "Registering new bar file with target..."
# # 	@echo 'package install $(ALP_NAMESPACE).bar' | $(NETCAT_REMOTE)
# # 	@echo " "

# # (echo "install /tmp/$(ALP_NAMESPACE).hello.bar `/scratchbox/tools/bin/ls -la buil
# # d/alp-simulator/$(ALP_NAMESPACE).hello.bar | /scratchbox/tools/bin/cut --delim=' 
# # ' --fields=6,6` 0 0 0755" ; /scratchbox/tools/bin/cat build/alp-simulator/com.ac
# # cess.apps.hello.bar ) | netcat -q 10 `cat /tmp/alp.ip` 5038
# install-alp: bar install-files # launcher uninstall
# 	@echo "Installing new bar file..."
# 	size=`ls -la $(ALP_NAMESPACE).bar | cut --delim=' ' --fields=6,6`; \
# 	(echo "install $(ALP_NAMESPACE).bar $$size 0 0 0755" ; cat $(ALP_NAMESPACE).bar ) | $(NETCAT_REMOTE)
# 	@echo; echo "Registering new bar file with target..."
# 	@echo 'package install /tmp/$(ALP_NAMESPACE).bar' | $(NETCAT_REMOTE)
# 	@echo " "

launch: 
	@echo 'package run bar:$(ALP_NAMESPACE)' | $(NETCAT_REMOTE)

# Note: bundle delete requires rdbgd version 11
# uninstall-alp:
# 	@echo 'package delete bar:$(ALP_NAMESPACE)' | $(NETCAT_REMOTE)
# 	-if test -e $(DEST_BND_DIR)/Manifest.xml ; then \
# 	  rm -Rf $(DEST_BND_DIR) ; \
# 	fi
#############
# install-files - Install built files into current rootfs
#           (DO NOT USE if target is running; does not interact with target)
#############

# install-files: alp-bundle
# 	$(mkinstalldirs) $(DEST_BND_ROOT)/$(ALP_NAMESPACE)
# # 	-if [ -e $(DEST_BND_DIR)/Manifest.xml ] ; then \
# # 	  echo " " ; \
# # 	  echo "Bundle already exists! Removing old bundle..." ; \
# # 	  rm -Rf $(DEST_BND_DIR) ; \
# # 	fi
# 	@echo "Installing new bundle files..."
# 	cp -Rf $(ALP_NAMESPACE) $(DEST_BND_ROOT)

# #############
# # uninstall-files - Uninstall built files from current rootfs
# #           (DO NOT USE if target is running; does not interact with target)
# #############

# uninstall-files:
# 	@echo " "
# 	-if [ -e $(DEST_BND_DIR)/Manifest.xml ] ; then \
# 	  echo "Removing old bundle... (NOTE: target should NOT be running!)" ; \
# 	  rm -Rf $(DEST_BND_DIR) ; \
# 	else \
# 	  echo "Manifest.xml not found in $(DEST_BND_DIR)" ; \
# 	  echo "If the directory exists, you'll need to remove it manually." ; \
# 	fi
# 	@echo " "

# ###########
# # uninstall - uninstall app from remote target (using "bundle delete")
# #           (depends on netcat instead of rdbgd since it works w/o target)
# ###########

# uninstall-alp: uninstall-files
# 	@# Note: bundle delete requires rdbgd version 11
# 	@echo " "
# 	@echo "Removing old bundle..."
# 	@echo "(If this returns an error, the target is probably not running.)"
# 	@echo "(In that case, the bundle should be gone when you next boot the target.)"
# 	@echo " "
# 	-@echo 'package delete bar:$(ALP_NAMESPACE)' | $(NETCAT_REMOTE)
# 	@echo " "
# 	@# explicitly remove the bundle directory in case the rdbgd command fails.

endif

